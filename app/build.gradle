plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId "com.bbgo.wanandroid"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true
        // 实现毛玻璃那种透明的效果需要添加的库
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true",
                        AROUTER_MODULE_NAME: project.getName()
                ]
            }
        }


    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
    generateStubs = true
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

dependencies {

    api rootProject.ext.roomLibs
    kapt rootProject.ext.compiler["roomCompiler"]

    implementation rootProject.ext.other["rvHelper"]

    implementation rootProject.ext.other["banner"]

    kapt rootProject.ext.compiler["arouterCompiler"]

    implementation project(":common-base")
    implementation project(":common-service")
    if (!Boolean.valueOf(rootProject.ext.module.isContentModule)) {
        implementation project(":module-content")
    }
    if (!Boolean.valueOf(rootProject.ext.module.isLoginModule)) {
        implementation project(":module-login")
    }
    if (!Boolean.valueOf(rootProject.ext.module.isHomeModule)) {
        implementation project(":module-home")
    }
    if (!Boolean.valueOf(rootProject.ext.module.isWeChatModule)) {
        implementation project(":module-wechat")
    }
    if (!Boolean.valueOf(rootProject.ext.module.isSysModule)) {
        implementation project(":module-sys")
    }
    if (!Boolean.valueOf(rootProject.ext.module.isSquareModule)) {
        implementation project(":module-square")
    }
    if (!Boolean.valueOf(rootProject.ext.module.isProjectModule)) {
        implementation project(":module-project")
    }
    if (!Boolean.valueOf(rootProject.ext.module.isComposeModule)) {
        implementation project(":module-compose")
    }


}