apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.didi.dokit'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    signingConfigs {
        wanandroid {
            keyAlias 'wanandroid.keystore'
            keyPassword 'wanandroid'
            storeFile file('wanandroid.keystore')
            storePassword 'wanandroid'
        }
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        multiDexEnabled true

        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true",
                        AROUTER_MODULE_NAME: project.getName()
                ]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true // 移除无用的resource文件
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.wanandroid
        }
        debug {//开发自己的debug包
            initWith release
            debuggable true
            minifyEnabled false
            shrinkResources false // 移除无用的resource文件
            proguardFiles.clear() // 不混淆
            signingConfig signingConfigs.wanandroid
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    buildFeatures {
        viewBinding true
    }


}

dokitExt {
    //通用设置
    comm {
        //地图经纬度开关
        gpsSwitch true
        //网络开关
        networkSwitch true
        //大图开关
        bigImgSwitch true
        //webView js 抓包
        webViewSwitch true
    }

    slowMethod {
        //调用栈模式配置 对应gradle.properties中DOKIT_METHOD_STRATEGY=0
        stackMethod {
            //默认值为 5ms 小于该值的函数在调用栈中不显示
            thresholdTime 10
            //调用栈函数入口 千万不要用我默认的配置 如果有特殊需求修改成项目中自己的入口 假如不需要可以去掉该字段
            enterMethods = ["com.didichuxing.doraemondemo.MainDebugActivity.test1"]
            //黑名单 粒度最小到类 暂不支持到方法  千万不要用我默认的配置 如果有特殊需求修改成项目中自己的入口 假如不需要可以去掉该字段
            methodBlacklist = ["com.facebook.drawee.backends.pipeline.Fresco"]
        }
        //普通模式配置 对应gradle.properties中DOKIT_METHOD_STRATEGY=1
        normalMethod {
            //默认值为 500ms 小于该值的函数在运行时不会在控制台中被打印
            thresholdTime 500
            //需要针对函数插装的包名 千万不要用我默认的配置 如果有特殊需求修改成项目中自己的项目包名 假如不需要可以去掉该字段
            packageNames = ["com.didichuxing.doraemondemo"]
            //不需要针对函数插装的包名&类名 千万不要用我默认的配置 如果有特殊需求修改成项目中自己的项目包名 假如不需要可以去掉该字段
            methodBlacklist = ["com.didichuxing.doraemondemo.dokit"]
        }
    }
}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
    generateStubs = true
    useBuildCache = true
    javacOptions {
        option("-Xmaxerrs", 500)
    }
}

def isBuildModule = rootProject.ext.module.isBuildModule

dependencies {

    implementation project(":common:common-base")
    implementation project(":common:common-service")
    if (!Boolean.valueOf(isBuildModule)) {
        implementation project(":modules:module-content")
        implementation project(":modules:module-login")
        implementation project(":modules:module-home")
        implementation project(":modules:module-wechat")
        implementation project(":modules:module-sys")
        implementation project(":modules:module-square")
        implementation project(":modules:module-project")
//        implementation project(":modules:module-compose")
        implementation project(":modules:module-collect")
        implementation project(":modules:module-media")
    }

    implementation rootProject.ext.roomLibs
    kapt rootProject.ext.compiler["roomCompiler"]

    implementation rootProject.ext.other["rvHelper"]

    kapt rootProject.ext.compiler["arouterCompiler"]

    compileOnly(rootProject.ext.jetpack["hilt"])
    kapt rootProject.ext.compiler["hiltAndroidCompiler"]

    debugImplementation "io.github.didi.dokit:dokitx:3.5.0"
}